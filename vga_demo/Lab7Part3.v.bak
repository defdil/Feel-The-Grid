module Lab7Part3(CLOCK_50, SW, KEY, VGA_CLK, VGA_HS, VGA_VS, VGA_BLANK_N, VGA_SYNC_N, VGA_R, VGA_G, VGA_B);
	input [9:0] SW;
	input [3:0] KEY;
	input CLOCK_50;

	output VGA_CLK, VGA_HS, VGA_VS, VGA_BLANK_N, VGA_SYNC_N;
	output [9:0] VGA_R, VGA_G, VGA_B;
   
	wire reset, ld_sDown, ld_sUp, ld_sRight, ld_sLeft, ld_d, ld_drawNew, ld_reset_old, plot, enable, up_flag, right_flag, 
	ld_done, clear1, ld_square_completion, ld_move_status;

	wire [2:0] output_colour, in_color;
	wire [7:0] x;
	wire [6:0] y;
	reg [26:0] count1;

	assign reset = KEY[0];
	assign in_color = SW[9:7];
		
	always @(posedge CLOCK_50) begin
	   if(clear1 == 1'b1)
		   count1 <= 26'd0;
	   else
		   count1 <= count1 + 1'b1;
	end
	
	assign clear1 = enable;
	assign enable = (count1 == 26'd12500000) ? 1'b1 : 1'b0;			
	
	vga_adapter VGA(.resetn(reset), .clock(CLOCK_50), .colour(output_colour), .x(x), .y(y), .plot(plot),
		.VGA_R(VGA_R), .VGA_G(VGA_G), .VGA_B(VGA_B), .VGA_HS(VGA_HS), .VGA_VS(VGA_VS), .VGA_BLANK(VGA_BLANK_N),
		.VGA_SYNC(VGA_SYNC_N), .VGA_CLK(VGA_CLK));
			
	defparam VGA.RESOLUTION = "160x120";
	defparam VGA.MONOCHROME = "FALSE";
	defparam VGA.BITS_PER_COLOUR_CHANNEL = 1;
	defparam VGA.BACKGROUND_IMAGE = "black.mif";

	control c0(.clock(CLOCK_50), .reset(reset), .ld_sDown(ld_sDown), .ld_sUp(ld_sUp), .ld_sRight(ld_sRight), 
		.ld_sLeft(ld_sLeft), .ld_d(ld_d), .ld_drawNew(ld_drawNew), .ld_reset_old(ld_reset_old), .ld_done(ld_done),
		.plot(plot), .enable(enable), .up_flag(up_flag), .right_flag(right_flag), .ld_square_completion(ld_square_completion), .ld_move_status(ld_move_status));

	datapath d0(.clock(CLOCK_50), .reset(reset), .ld_sDown(ld_sDown), .ld_sUp(ld_sUp) , .ld_sRight(ld_sRight), .ld_sLeft(ld_sLeft), .ld_d(ld_d),
		.ld_drawNew(ld_drawNew), .ld_reset_old(ld_reset_old), .ld_done(ld_done),.up_flag(up_flag), .right_flag(right_flag), .output_colour(output_colour), 
		.output_x(x), .output_y(y), .colour(in_color), .ld_square_completion(ld_square_completion), .ld_move_status(ld_move_status));

endmodule

module control (clock, reset, ld_sDown, ld_sUp, ld_sRight, ld_sLeft, ld_d, ld_drawNew, ld_reset_old, ld_done, plot, enable, up_flag, right_flag, ld_square_completion, ld_move_status);
	input clock, reset, enable, up_flag, right_flag, ld_square_completion, ld_move_status;
	output reg ld_sDown, ld_sUp, ld_sRight, ld_sLeft, ld_d, ld_drawNew, plot, ld_done, ld_reset_old;
	reg [5:0] current_state, next_state; 
    
    localparam 	S_Reset = 5'd0, 
				S_DeleteOld = 5'd1,
				S_StartAnimation = 5'd2,                
                S_ShiftUp = 5'd3,
				S_ShiftDown = 5'd4,
				S_ShiftRight = 5'd5,
                S_ShiftLeft = 5'd6,
				S_PrintNew = 5'd7,
				S_Done = 5'd8;

always@(*)
 begin: state_table 
     case (current_state)
		S_Reset: next_state = S_DeleteOld;
		S_DeleteOld: next_state =  ld_move_status ? S_StartAnimation : S_DeleteOld;
		S_StartAnimation: next_state = up_flag ? S_ShiftUp : S_ShiftDown;
        S_ShiftUp: next_state = right_flag ? S_ShiftRight : S_ShiftLeft; 
        S_ShiftDown: next_state = right_flag ? S_ShiftRight : S_ShiftLeft; 
		S_ShiftLeft: next_state = S_PrintNew;
		S_ShiftRight: next_state = S_PrintNew;
		S_PrintNew: next_state =  ld_square_completion ? S_Done : S_PrintNew ;
		S_Done: next_state = enable ? S_DeleteOld: S_Done;
		default: next_state = S_StartAnimation;
		endcase
 end

always @(*)
  begin: enable_signals
  ld_sDown = 1'b0;       
  ld_sUp = 1'b0;
  ld_sRight = 1'b0;
  ld_sLeft = 1'b0;
  ld_d = 1'b0;
  ld_drawNew = 1'b0;
  ld_reset_old = 1'b0;
  plot = 1'b0;
  ld_done = 1'b0; 
  
 case (current_state)
	S_ShiftDown: begin
		ld_sDown = 1'b1; 
   end
	S_ShiftUp: begin
		ld_sUp = 1'b1; 
   end
	S_ShiftRight: begin
		ld_sRight = 1'b1; 
   end
   S_ShiftLeft: begin
        ld_sLeft = 1'b1; 
   end // S_ShiftLeft:
   S_DeleteOld: begin
        ld_d = 1'b1;
		plot = 1'b1;
   end // S_DeleteOld:
   S_PrintNew: begin
        ld_drawNew = 1'b1;
        plot = 1'b1;
   end // S_PrintNew:
   S_Reset: begin
	 	ld_reset_old = 1'b1; 
   end // S_Reset:
   S_Done: begin
  		ld_done = 1'b1; 
   end // S_Done:
endcase
end

always@(posedge clock)
   begin: state_FFs
      if(!reset)       
         current_state <= S_Reset; 
      else            
		   current_state <= next_state;
   end // state_FFS
endmodule

module datapath(clock, reset, ld_sDown, ld_sUp, ld_sRight, ld_sLeft, ld_d, ld_drawNew, ld_reset_old, ld_done, up_flag, right_flag, output_colour, output_x, output_y, colour, ld_square_completion, ld_move_status);
	input clock, reset, ld_sDown, ld_sUp, ld_sRight, ld_sLeft, ld_d, ld_drawNew, ld_reset_old, ld_done;
	input [2:0] colour;
	output reg up_flag, right_flag, ld_square_completion, ld_move_status;
	output reg [2:0] output_colour;
	output reg [7:0] output_x;
	output reg [6:0] output_y;

	reg [4:0] counter_draw;
	reg [7:0] x_reg;
	reg [6:0] y_reg;
	reg [15:0] counter1;
	
always@(posedge clock) begin
   if(ld_sDown) begin	
      	counter_draw <= 5'b00000;
		counter1 <= 16'b0;
		ld_move_status <= 1'b0;
	    ld_square_completion <= 1'b0;		
		y_reg <= y_reg + 1'b1;
		if(y_reg == 7'd116) up_flag = 1'b1;			
	end // S_ShiftRight:

   if(ld_sUp) begin	
	   	counter_draw <= 5'b00000;
		counter1 <= 16'b0;
		ld_move_status <= 1'b0;
		ld_square_completion <= 1'b0;
      	y_reg <= y_reg-1'b1;
		if(y_reg == 7'b0) up_flag = 1'b0;			
	end // S_ShiftRight:
	
	if(ld_sRight) begin
	 	counter_draw <= 5'b00000;
	 	counter1 <= 16'b0;
	 	ld_move_status <= 1'b0;
	 	ld_square_completion <= 1'b0;
		x_reg <= x_reg + 1'b1;
		if(x_reg == 8'd156) right_flag = 1'b0;		
	end // if(ld_sRight)
	
	if(ld_sLeft) begin
	   	counter_draw <= 5'b00000;
		counter1 <= 16'b0;
		ld_move_status <= 1'b0;
		ld_square_completion <= 1'b0;
	   	x_reg <= x_reg-1'b1;
		if(x_reg == 8'b0) right_flag = 1'b1;
	end // if(ld_sLeft)
	
	if(ld_d) begin
		if(counter1 <= 16'b0111111111111111)
			begin
				output_x <= counter1[7:0] ;
				output_y <= counter1[14:8] ;
				counter1 <= counter1 + 1'b1;
				output_colour <= 3'b000;
			end
		if(counter1 == 16'b1000000000000000)
		begin
			ld_move_status <= 1'b1;
		end
	end // if(ld_d)
	
	if(ld_drawNew) begin
		if(counter_draw <= 5'b01111)
		begin
			output_x <= x_reg + counter_draw[1:0];
			output_y <= y_reg + counter_draw[3:2];
			counter_draw <= counter_draw + 1'b1;
		end
		if(counter_draw == 5'b10000)
		begin
	   		ld_square_completion <= 1'b1;
			counter_draw <= 5'b00000;
		end 
		output_colour <= colour;
	end // if(ld_drawNew)
	
	if(ld_reset_old) begin
	   	counter_draw <= 5'b0000;
	   	counter1 <= 5'b00000;	
	   	x_reg <= 8'b0; 
      	y_reg <= 7'b0;
		ld_move_status <= 1'b0;
	   	right_flag <= 1'b1;
	   	up_flag <= 1'b0;
	   	ld_square_completion <= 1'b0;	
	end // if(ld_reset_old)	
end
endmodule // module
